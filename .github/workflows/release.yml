name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: '鲁迅日记 ' + context.ref.replace('refs/tags/', ''),
              draft: true,
              prerelease: false
            });
            return { id: data.id, upload_url: data.upload_url };

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x64
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
        exclude:
          - platform: macos-latest
            # remove the duplicate entry without target/arch
          
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: './pnpm-lock.yaml'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies
        run: pnpm install

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          
      - name: Configure Windows build for NSIS
        if: matrix.platform == 'windows-latest'
        run: |
          echo '{"tauri": {"bundle": {"windows": {"wix": null, "nsis": {}}}}}' > windows-config.json

      - name: Build frontend
        run: pnpm build

      - name: Build Tauri App (Windows)
        if: matrix.platform == 'windows-latest'
        uses: tauri-apps/tauri-action@v0
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tauriScript: pnpm tauri
          args: --config windows-config.json --target ${{ matrix.target }}
        
      - name: Build Tauri App (Non-Windows)
        if: matrix.platform != 'windows-latest'
        uses: tauri-apps/tauri-action@v0
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tauriScript: pnpm tauri
          args: --target ${{ matrix.target }}

  publish-release:
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            }) 
